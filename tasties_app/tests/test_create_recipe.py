import pytest
from authConstants import VALID_USER, VALID_PASSWORD
from tasties_app.models import Recipe
from django.core.exceptions import ObjectDoesNotExist
from django.contrib.auth.models import User
from pytest_django.asserts import assertTemplateUsed


@pytest.mark.django_db
class TestCreateRecipe:
    def test_unauthorized_access(self, client, signed_up_credentials):
        """
        This test verifies that a user must be logged
        in to create a recipe. If a user is not logged in,
        redirect to '/' is expected.

        Args:
            client : Django testing client
            signed_up_credentials (fixture): creates a user
        """
        response = client.get("/create_recipe/")
        assert response.status_code == 302
        assert (
            response.url == "/login/?next=/create_recipe/"
        )  # verify that after login, redirect to create_recipe
        response = client.post(
            "/login/", data={"username": VALID_USER, "password": VALID_PASSWORD}
        )
        assert response.status_code == 302  # verify redirect to homepage
        assert response.url == "/"

    def test_valid_recipe(
        self,
        client,
        signed_up_credentials,
        login_to_site,
        form_data,
        formset_data
    ):
        """
        This test verifies the creation of a valid recipe
        using the view function create_recipe

        Args:
            client : Django testing client
            signed_up_credentials (fixture): creates a user
            login_to_site (fixture): logs in user created by signed_up_credentials
            form_data (dictionary): raw data for recipe form
            formset_data (dictionary): raw data for ingredient formset
        """
        response = client.get("/create_recipe/")
        assert response.status_code == 200  # assert create_recipe page exists

        author_id = User.objects.get(
            username=VALID_USER)  # fetch user currently logged in
        form_data.update(formset_data)
        response = client.post(
            "/create_recipe/", data=form_data
        )  # POST data generated by form_data, formset_data

        assert Recipe.objects.filter(title=form_data['title']).exists()
        saved_recipe = Recipe.objects.get(title=form_data['title'])
        assert saved_recipe.author_id == author_id
        assert response.status_code == 302  # verify redirect to recipe view page
        assert response.url == "/view_recipe/" + str(saved_recipe.id) + "/"

    def test_no_ingredients(
        self, client, signed_up_credentials, login_to_site, form_data
    ):
        """
        This tests verifies that a recipe without ingredients
        cannot be created.

        Args:
            client : Django testing client
            signed_up_credentials (fixture): creates a user
            login_to_site (fixture): logs in user created by signed_up_credentials
            form_data (dictionary): raw data for recipe form
        """
        response = client.get("/create_recipe/")
        assert response.status_code == 200

        response = client.post("/create_recipe/", data=form_data)
        with pytest.raises(ObjectDoesNotExist):
            Recipe.objects.get(title=form_data['title'])
        assertTemplateUsed(response, 'tasties_app/create_recipe.html')  # verify no redirect
