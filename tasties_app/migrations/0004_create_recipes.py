from django.db import migrations, transaction
from tasties_app.models import Recipe, Category, Ingredient, Rating
from django.contrib.auth.models import User


class Migration(migrations.Migration):

    dependencies = [
        ("tasties_app", "0003_create_categories"),
    ]

    def generate_data(apps, schema_editor):
        default_author = User.objects.create_user(
            username="John Doe", password="password"
        )

        user_pool_text = [
            ("Sumaya Carter", "1O2who80"),
            ("Angelina Gardner", "1RxSav45"),
            ("Amber Hancock", "CG8L7Hbn"),
            ("Ria Villa", "VcdGd9i7"),
            ("Tyrone Kerr", "svpr1sj5"),
            ("Rhys Mays", "gNuyWSo4"),
            ("Monty Johnston", "dkZHF8rs"),
            ("Kobi Hatfield", "kBn0EX29"),
            ("Ameer Ali", "N5Ym9i1i"),
            ("Kyle Drake", "2DY5gmBS"),
        ]

        author_pool = []
        for user in user_pool_text:
            with transaction.atomic():
                try:
                    author = User.objects.create_user(
                        username=user[0], password=user[1]
                    )
                    author_pool.append(author)
                except Exception:
                    continue

        titles = [
            "Cabbage and rosemary gyoza",
            "Cardamom scones with chilli jam",
            "Cham and matzo farfel salad",
            "Garam masala and buttermilk crepes",
            "Pepper and squash vindaloo",
            "Chorizo and pesto spaghetti",
            "Spinach and bean soup",
            "Rice and currant loaf",
            "Pumpkin seed and stilton biscuits",
            "Mushroom and egg sushi",
            "Bacon and cinnamon muffins",
            "Bacon and sultana biscuits",
            "Pesto and leek wontons",
            "Spring onion and sweetcorn fritters",
            "Sesame and salmon crepes",
            "Blueberry and chicken pancake",
            "Pepper and shallot fritters",
            "Jalapeno and persimmon parcels",
            "Sausage and pork casserole",
            "Cardamom and raisin muffins",
            "Pineapple and coconut vindaloo",
            "Orange and treacle cookies",
            "Turtle and anchovy salad",
            "Banana and egg panini",
            "Roquefort and lime salad",
            "Weetabix and bread",
            "Kohlrabi and lime soup",
            "Camembert and butterbean salad",
            "Brill and raita salad",
            "Strawberry and raisin yoghurt",
            "Potato starch and persimmon salad",
            "Pumpkin and pumpkin seed cookies",
            "Sausage and kipper salad",
            "Leek and pumpkin loaf",
            "Feijoa and chico fruit salad",
            "Lettuce and chicken ciabatta",
            "Wasabi and sage stir fry",
            "Ricotta and mango cheesecake",
            "Sausage and garam masala dumplings",
            "Pork and tahini bagel",
            "Parsley and olive salad",
            "Italian dressing and snake salad",
            "Onion and tahini ciabatta",
            "Sausage and tubetti spaghetti",
            "Cauliflower and monkfish madras",
            "Cod and mango curry",
            "Hazelnut and cheese crepes",
            "Yoghurt and basil soup",
            "Angelica and hake salad",
            "Polenta and popcorn cake",
        ]

        descriptions = [
            "Thin pastry cases stuffed with savoy cabbage and dried rosemary",
            "Fluffy, all-butter scones served with chilli jam and fresh clotted cream",
            "Cham and matzo farfel served on a bed of lettuce",
            "Fluffy crepes filled with garam masala and creamy buttermilk",
            "Hot vindaloo made with green pepper and fresh squash",
            "Spagetti topped with a blend of Spanish chorizo and green pesto",
            "Fresh spinach and bean combined into creamy soup",
            "Fluffy bread made with thai fragrant rice and fresh currant",
            "Crumbly biscuits made with pumpkin seeds and stilton",
            "Chestnut mushroom and free range eggs on a bed of sushi rice",
            "Moist muffins made with thick bacon and cinnamon",
            "Crumbly biscuits made with lea bacon and sultana",
            "Thin wonton cases stuffed with sun-dried tomato pesto and fresh leek",
            "Crispy fritters filled with fresh spring onion and creamed sweetcorn",
            "Crispy crepes filled with sesame and smoked salmon",
            "Crispy pancake filled with fresh blueberry and free range chicken",
            "Crispy fritters filled with bell pepper and fresh shallot",
            "Thin filo pastry cases stuffed with fresh jalapeno and persimmon",
            "Cumberland sausage and pork stewed",
            "Crumbly muffins made with black cardamom and fresh raisin",
            "Hot vindaloo made with fresh pineapple and coconut",
            "Crunchy cookies made with juicy orange and dark treacle",
            "A crunchy salad featuring turtle and anchovy",
            "A warm, pressed panini filled with fresh banana and free range eggs",
            "Roquefort and tangy lime served on a bed of lettuce",
            "Crunchy bread made with weetabix and",
            "Kohlrabi and fresh lime combined into chunky soup",
            "Camembert and butterbean served on a bed of lettuce",
            "Brill and raita served on a bed of lettuce",
            "A light yoghurt made with fresh strawberries and raisin",
            "A crunchy salad featuring potato starch and fresh persimmon",
            "Crumbly cookies made with spiced pumpkin and pumpkin seeds",
            "Cumberland sausage and kipper served on a bed of lettuce",
            "Crunchy bread made with fresh leek and pumpkin",
            "A crisp salad featuring fresh feijoa and chico fruit",
            "Warm ciabatta filled with little gem lettuce and free range chicken",
            "Crunchy stir fry featuring fresh wasabi and dried sage",
            "A rich cheesecake layered with ricotta and dried mango",
            "Thin pastry cases stuffed with spicy sausage and garam masala",
            "A warm bagel filled with pork and tahini",
            "Fresh parsley and olive served on a bed of lettuce",
            "Italian dressing and snake served on a bed of lettuce",
            "Warm ciabatta filled with dried onion and tahini",
            "Spagetti topped with a blend of spicy sausage and tubetti",
            "Medium-hot madras made with fresh cauliflower and monkfish",
            "Mild curry made with pacific cod and dried mango",
            "Crispy crepes filled with hazelnut and smoked cheese",
            "Live yoghurt and fresh basil combined into smooth soup",
            "Angelica and hake served on a bed of lettuce",
            "Rich cake made with polenta and popcorn",
        ]

        directions = [
            "Denn ohne erst in dich zu dringen Kann kein Verrter lauern, voca me cum benedictis. "
            "per sepulchra regionum, gere curam mei finis.",
            "Und ist ein Mensch gefallen, Quid sum miser tunc dicturus.",
            "Iudex ergo cum sedebit, Iudex ergo cum sedebit, Strkt mit Geduld sie in Gefahr.",
            "dona eis requiem. Amen. ante diem rationis. Ingemisco tamquam reus: mihi quoque spem dedisti. "
            "Qui Mariam absolvisti, cuncta stricte discussurus. Iuste Iudex ultionis.",
            "Inter oves locum praesta, ne perenni cremer igne. dona eis requiem. Amen.",
            "Rex tremendae maiestatis, culpa rubet vultus meus.",
            "Qui Mariam absolvisti, iudicandus homo reus. cuncta stricte discussurus. Qui Mariam absolvisti.",
            "Recordare, Iesu pie, gere curam mei finis. Qui Mariam absolvisti, donum fac remissionis.",
            "cor contritum quasi cinis, Der Weisheit Geist dem neuen Paar, mihi quoque spem dedisti.",
            "Nehmt sie in euren Wohnsitz auf. ante diem rationis. cum vix iustus sit securus. iudicanti responsura. "
            "Doch sollten sie zu Grabe gehen, mihi quoque spem dedisti.",
            "per sepulchra regionum, Recordare, Iesu pie, Rex tremendae maiestatis, Und ist ein Mensch gefallen, "
            "Lasst sie der Prfung Frchte sehen.",
            "Nehmt sie in euren Wohnsitz auf. Die ihr der Wand'rer Schritte lenket, Steh auf, erheitre dich, "
            "o Liebe; Quem patronum rogaturus, ne perenni cremer igne. voca me cum benedictis. "
            "salva me, fons pietatis. ",
            "iudicanti responsura. In diesen heil'gen Mauern, quod sum causa tuae viae.",
            "teste David cum Sibylla. Confutatis maledictis, Huic ergo parce, Deus: donum fac remissionis ",
            "Nehmt sie in euren Wohnsitz auf. Quid sum miser tunc dicturus. flammis acribus addictis: "
            "mihi quoque spem dedisti. qua resurget ex favilla Liber scriptus proferetur et ab haedis me sequestra.",
            "Preces meae non sunt dignae: Kennt man die Rache nicht, Quaerens me, sedisti lassus: "
            "Liber scriptus proferetur Strkt mit Geduld sie in Gefahr, gere curam mei finis.",
            "ne perenni cremer igne. cum vix iustus sit securus. iudicanti responsura. quidquid latet, "
            "apparebit; Weil man dem Feind vergibt. Kennt man die Rache nicht, ne perenni cremer igne.",
            "redemisti crucem passus: teste David cum Sibylla. Vergngt und froh ins bess're Land. "
            "mihi quoque spem dedisti. Denn ohne erst in dich zu dringen Recordare, Iesu pie.",
            "in quo totum continetur, Inter oves locum praesta, cor contritum quasi cinis, "
            "Weis ich von deinem Herzen mehr: Wen solche Lehren nicht erfreun, sed tu bonus fac benigne.",
            "Tuba mirum spargens sonum, tantus labor non sit cassus. quod sum causa tuae viae: "
            "Nehmt sie in euren Wohnsitz auf. Doch geh ich dir die Freyheit nicht. "
            "Doch geh ich dir die Freyheit nicht.",
            "Preces meae non sunt dignae: Quem patronum rogaturus, qui salvandos salvas gratis.",
            "Qui Mariam absolvisti, Quem patronum rogaturus, donum fac remissionis quod sum causa tuae viae.",
            "Strkt mit Geduld sie in Gefahr, Lacrymosa dies illa Wen solche Lehren nicht erfreun, "
            "Du liebest einen andern sehr. Huic ergo parce, Deus.",
            "Kann kein Verrter lauern, Denn ohne erst in dich zu dringen Der Weisheit Geist dem neuen Paar, "
            "Kann kein Verrter lauern.",
            "quod sum causa tuae viae: Iudex ergo cum sedebit, ",
            "quidquid latet, apparebit; Quem patronum rogaturus, ",
            "Quid sum miser tunc dicturus. Quem patronum rogaturus, sed tu bonus fac benigne, "
            "Iudex ergo cum sedebit, iudicanti responsura. dona eis requiem. Amen.",
            "Der Weisheit Geist dem neuen Paar, Ingemisco tamquam reus: ",
            "In diesen heil'gen Hallen Dann wandelt er an Freundes Hand supplicanti parce, Deus. "
            "voca me cum benedictis. Verdienet nicht, ein Mensch zu sein. mihi quoque spem dedisti.",
            "Iudex ergo cum sedebit, Quid sum miser tunc dicturus.",
            "ne me perdas illa die. O Isis und Osiris, schenket teste David cum Sibylla. Inter oves locum praesta.",
            "sed tu bonus fac benigne, ne perenni cremer igne. Liber scriptus proferetur cuncta stricte discussurus.",
            "Kann kein Verrter lauern, in quo totum continetur.",
            "Wen solche Lehren nicht erfreun, iudicanti responsura. teste David cum Sibylla. Quaerens me, sedisti.",
            "per sepulchra regionum, et latronem exaudisti, Qui Mariam absolvisti, ne me perdas illa die.",
            "donum fac remissionis flammis acribus addictis: Strkt mit Geduld sie in Gefahr, "
            "In diesen heil'gen Hallen O Isis und Osiris, schenket in quo totum continetur.",
            "Die ihr der Wand'rer Schritte lenket, et ab haedis me sequestra, Quantus tremor est futurus, "
            "ne perenni cremer igne. Du liebest einen andern sehr. ne perenni cremer igne. In diesen heil'gen.",
            "nil inultum remanebit. voca me cum benedictis. ne perenni cremer igne. unde mundus iudicetur.",
            "Weil man dem Feind vergibt. Vergngt und froh ins bess're Land. Tuba mirum spargens sonum, "
            "voca me cum benedictis. flammis acribus addictis: Kann kein Verrter lauern, statuens in parte dextra.",
            "Huic ergo parce, Deus: Der Weisheit Geist dem neuen Paar, Die ihr der Wand'rer Schritte lenket.",
            "Preces meae non sunt dignae: In diesen heil'gen Hallen flammis acribus addictis.",
            "ne perenni cremer igne. Dies irae, dies illa redemisti crucem passus: cuncta stricte discussurus.",
            "cum resurget creatura, Nehmt sie in euren Wohnsitz auf.",
            "Quantus tremor est futurus, Rex tremendae maiestatis, Doch geh ich dir die Freyheit nicht.",
            "Wo Mensch den Menschen liebt, Huic ergo parce, Deus: Weis ich von deinem Herzen mehr: "
            "in quo totum continetur, in quo totum continetur.",
            "Iudex ergo cum sedebit, ne perenni cremer igne. ne perenni cremer igne. salva me, fons pietatis. "
            "Fhrt Liebe ihn zur Pflicht. Rex tremendae maiestatis.",
            "In diesen heil'gen Hallen Zur Liebe will ich dich nicht zwingen, Quid sum miser tunc dicturus."
            "Nehmt sie in euren Wohnsitz auf. et ab haedis me sequestra.",
            "Inter oves locum praesta, tantus labor non sit cassus. In diesen heil'gen Hallen qui salvandos salvas.",
            "cum vix iustus sit securus. redemisti crucem passus: flammis acribus addictis: Oro supplex et acclinis.",
            "Ingemisco tamquam reus: Qui Mariam absolvisti.",
        ]

        minutes = [
            43,
            56,
            40,
            50,
            46,
            19,
            48,
            7,
            78,
            49,
            16,
            52,
            57,
            15,
            5,
            19,
            66,
            53,
            48,
            71,
            67,
            42,
            7,
            27,
            70,
            40,
            61,
            53,
            14,
            40,
            27,
            56,
            12,
            68,
            65,
            12,
            21,
            46,
            63,
            63,
            38,
            21,
            25,
            7,
            71,
            15,
            70,
            79,
            10,
            38,
        ]

        ingredient_list = [
            [
                (388, "Whole", "Flour"),
                (365, "Gram", "Water"),
                (609, "Whole", "Salt"),
                (140, "Milliliter", "Sugar"),
                (556, "Gram", "Cabbage"),
                (694, "Milliliter", "Rosemary"),
            ],
            [
                (162, "Cup", "Sugar"),
                (834, "Cup", "Flour"),
                (891, "Fluid Ounce", "Butter"),
                (272, "Gram", "Egg"),
                (44, "Cup", "Milk"),
                (129, "Ounce", "Clotted cream"),
                (110, "Fluid Ounce", "Cardamom"),
                (582, "Cup", "Chilli"),
            ],
            [
                (939, "Ounce", "Lettuce"),
                (415, "Fluid Ounce", "Cham"),
                (108, "Ounce", "Matzo farfel"),
            ],
            [
                (406, "Whole", "Flour"),
                (576, "Tea Spoon", "Butter"),
                (264, "Milliliter", "Egg"),
                (163, "Gram", "Milk"),
                (676, "Ounce", "Garam masala"),
                (605, "Ounce", "Buttermilk"),
            ],
            [
                (5, "Ounce", "Onion"),
                (158, "Whole", "Peppers"),
                (311, "Milliliter", "Garlic"),
                (179, "Fluid Ounce", "Ginger"),
                (265, "Whole", "Tumeric"),
                (721, "Milliliter", "Cumin"),
                (257, "Ounce", "Coriander"),
                (160, "Cup", "Black pepper"),
                (439, "Milliliter", "Mustard seeds"),
                (396, "Milliliter", "Cardamon"),
                (342, "Whole", "Cinnamon"),
                (431, "Gram", "White wine vinegar"),
                (693, "Tea Spoon", "Cayenne"),
                (287, "Fluid Ounce", "Pepper"),
                (927, "Whole", "Squash"),
            ],
            [
                (106, "Gram", "Tomato"),
                (985, "Whole", "Passata"),
                (436, "Fluid Ounce", "Onion"),
                (262, "Gram", "Garlic"),
                (908, "Milliliter", "Spagetti"),
                (846, "Gram", "Oregano"),
                (789, "Milliliter", "Black pepper"),
                (434, "Milliliter", "Chorizo"),
                (546, "Tea Spoon", "Pesto"),
            ],
            [
                (987, "Whole", "Garlic"),
                (723, "Fluid Ounce", "Spinach"),
                (201, "Ounce", "Bean"),
                (376, "Gram", "Cream"),
            ],
            [
                (844, "Fluid Ounce", "Flour"),
                (748, "Gram", "Salt"),
                (237, "Milliliter", "Yeast"),
                (447, "Gram", "Butter"),
                (664, "Cup", "Water"),
                (537, "Milliliter", "Onions"),
                (209, "Ounce", "Rice"),
                (326, "Tea Spoon", "Currant"),
            ],
            [
                (562, "Ounce", "Flour"),
                (810, "Whole", "Butter"),
                (122, "Milliliter", "Egg"),
                (554, "Fluid Ounce", "Sugar"),
                (238, "Cup", "Pumpkin seed"),
                (961, "Gram", "Stilton"),
            ],
            [
                (667, "Ounce", "Rice"),
                (983, "Whole", "Rice vinegar"),
                (233, "Tea Spoon", "Sugar"),
                (674, "Cup", "Mushroom"),
                (922, "Tea Spoon", "Egg"),
            ],
            [
                (575, "Milliliter", "Flour"),
                (698, "Fluid Ounce", "Butter"),
                (854, "Fluid Ounce", "Egg"),
                (876, "Ounce", "Sugar"),
                (799, "Whole", "Bacon"),
                (249, "Cup", "Cinnamon"),
            ],
            [
                (251, "Ounce", "Flour"),
                (827, "Fluid Ounce", "Butter"),
                (665, "Fluid Ounce", "Egg"),
                (858, "Fluid Ounce", "Sugar"),
                (360, "Fluid Ounce", "Bacon"),
                (609, "Tea Spoon", "Sultana"),
            ],
            [
                (367, "Whole", "Flour"),
                (450, "Tea Spoon", "Water"),
                (192, "Tea Spoon", "Salt"),
                (84, "Cup", "Onions"),
                (254, "Whole", "Pesto"),
                (48, "Cup", "Leek"),
            ],
            [
                (576, "Whole", "Flour"),
                (385, "Fluid Ounce", "Butter"),
                (232, "Fluid Ounce", "Egg"),
                (19, "Fluid Ounce", "Milk"),
                (128, "Gram", "Spring onion"),
                (464, "Cup", "Sweetcorn"),
            ],
            [
                (997, "Tea Spoon", "Flour"),
                (172, "Whole", "Butter"),
                (981, "Whole", "Egg"),
                (430, "Tea Spoon", "Milk"),
                (748, "Whole", "Sesame"),
                (166, "Gram", "Salmon"),
            ],
            [
                (178, "Whole", "Flour"),
                (384, "Gram", "Butter"),
                (355, "Cup", "Egg"),
                (932, "Gram", "Milk"),
                (266, "Ounce", "Blueberry"),
                (274, "Fluid Ounce", "Chicken"),
            ],
            [
                (912, "Gram", "Flour"),
                (230, "Tea Spoon", "Butter"),
                (773, "Ounce", "Egg"),
                (809, "Ounce", "Milk"),
                (158, "Ounce", "Pepper"),
                (825, "Whole", "Shallot"),
            ],
            [
                (427, "Milliliter", "Flour"),
                (927, "Cup", "Water"),
                (593, "Ounce", "Salt"),
                (553, "Gram", "Onions"),
                (768, "Gram", "Jalapeno"),
                (281, "Gram", "Persimmon"),
            ],
            [
                (165, "Milliliter", "Onion"),
                (870, "Milliliter", "Salt"),
                (512, "Fluid Ounce", "Black pepper"),
                (593, "Gram", "Potatoes"),
                (560, "Whole", "Sausage"),
                (162, "Milliliter", "Pork"),
            ],
            [
                (484, "Tea Spoon", "Flour"),
                (755, "Milliliter", "Butter"),
                (859, "Whole", "Egg"),
                (58, "Whole", "Sugar"),
                (35, "Ounce", "Cardamom"),
                (290, "Ounce", "Raisin"),
            ],
            [
                (132, "Milliliter", "Onion"),
                (604, "Cup", "Peppers"),
                (950, "Ounce", "Garlic"),
                (429, "Cup", "Ginger"),
                (776, "Gram", "Tumeric"),
                (538, "Cup", "Cumin"),
                (523, "Fluid Ounce", "Coriander"),
                (688, "Gram", "Black pepper"),
                (649, "Ounce", "Mustard seeds"),
                (81, "Gram", "Cardamon"),
                (342, "Tea Spoon", "Cinnamon"),
                (336, "Cup", "White wine vinegar"),
                (250, "Tea Spoon", "Cayenne"),
                (688, "Gram", "Pineapple"),
                (815, "Cup", "Coconut"),
            ],
            [
                (777, "Whole", "Flour"),
                (471, "Ounce", "Butter"),
                (83, "Gram", "Egg"),
                (749, "Cup", "Sugar"),
                (868, "Gram", "Orange"),
                (776, "Fluid Ounce", "Treacle"),
            ],
            [
                (11, "Cup", "Cress"),
                (454, "Fluid Ounce", "Lettuce"),
                (389, "Tea Spoon", "Tomato"),
                (492, "Whole", "Turtle"),
                (230, "Milliliter", "Anchovy"),
            ],
            [
                (727, "Gram", "Flour"),
                (827, "Fluid Ounce", "Yeast"),
                (870, "Whole", "Water"),
                (454, "Gram", "Salt"),
                (229, "Ounce", "Sugar"),
                (169, "Fluid Ounce", "Oil"),
                (238, "Cup", "Banana"),
                (671, "Milliliter", "Egg"),
            ],
            [
                (389, "Whole", "Lettuce"),
                (833, "Cup", "Roquefort"),
                (755, "Fluid Ounce", "Lime"),
            ],
            [
                (299, "Tea Spoon", "Flour"),
                (71, "Milliliter", "Salt"),
                (275, "Whole", "Yeast"),
                (925, "Milliliter", "Butter"),
                (871, "Fluid Ounce", "Water"),
                (569, "Ounce", "Sugar"),
                (33, "Ounce", "Weetabix"),
            ],
            [
                (658, "Cup", "Onion"),
                (959, "Fluid Ounce", "Kohlrabi"),
                (596, "Whole", "Lime"),
            ],
            [
                (168, "Tea Spoon", "Lettuce"),
                (905, "Ounce", "Camembert"),
                (32, "Whole", "Butterbean"),
            ],
            [
                (462, "Ounce", "Lettuce"),
                (33, "Fluid Ounce", "Brill"),
                (765, "Ounce", "Raita"),
            ],
            [
                (88, "Gram", "Soya milk"),
                (581, "Whole", "Sugar"),
                (989, "Tea Spoon", "Strawberry"),
                (105, "Milliliter", "Raisin"),
            ],
            [
                (894, "Fluid Ounce", "Cress"),
                (788, "Whole", "Tomato"),
                (766, "Fluid Ounce", "White cabbage"),
                (703, "Tea Spoon", "Potato starch"),
                (817, "Fluid Ounce", "Persimmon"),
            ],
            [
                (875, "Tea Spoon", "Flour"),
                (617, "Cup", "Butter"),
                (228, "Whole", "Egg"),
                (387, "Gram", "Sugar"),
                (670, "Ounce", "Pumpkin"),
                (899, "Fluid Ounce", "Pumpkin seed"),
            ],
            [
                (19, "Ounce", "Lettuce"),
                (17, "Tea Spoon", "Sausage"),
                (452, "Tea Spoon", "Kipper"),
            ],
            [
                (30, "Fluid Ounce", "Flour"),
                (779, "Fluid Ounce", "Salt"),
                (702, "Gram", "Yeast"),
                (570, "Milliliter", "Butter"),
                (864, "Fluid Ounce", "Water"),
                (35, "Ounce", "Onions"),
                (263, "Cup", "Leek"),
                (509, "Tea Spoon", "Pumpkin"),
            ],
            [
                (962, "Gram", "Cress"),
                (969, "Ounce", "Tomato"),
                (404, "Gram", "Lettuce"),
                (174, "Milliliter", "Feijoa"),
                (29, "Cup", "Chico fruit"),
            ],
            [
                (277, "Whole", "Flour"),
                (216, "Milliliter", "Yeast"),
                (577, "Milliliter", "Water"),
                (383, "Whole", "Salt"),
                (778, "Gram", "Sugar"),
                (698, "Whole", "Oil"),
                (168, "Gram", "Lettuce"),
                (353, "Fluid Ounce", "Chicken"),
            ],
            [
                (771, "Fluid Ounce", "Peppers"),
                (286, "Fluid Ounce", "Wasabi"),
                (350, "Gram", "Sage"),
            ],
            [
                (785, "Gram", "Flour"),
                (548, "Milliliter", "Butter"),
                (388, "Ounce", "Water"),
                (818, "Fluid Ounce", "Sugar"),
                (985, "Fluid Ounce", "Vanilla"),
                (874, "Cup", "Double cream"),
                (732, "Gram", "Mascarpone"),
                (334, "Milliliter", "Ricotta"),
                (784, "Cup", "Mango"),
            ],
            [
                (780, "Fluid Ounce", "Flour"),
                (139, "Cup", "Water"),
                (480, "Whole", "Salt"),
                (167, "Fluid Ounce", "Onions"),
                (419, "Whole", "Sausage"),
                (176, "Fluid Ounce", "Garam masala"),
            ],
            [
                (556, "Cup", "Flour"),
                (793, "Tea Spoon", "Yeast"),
                (244, "Tea Spoon", "Water"),
                (300, "Gram", "Salt"),
                (999, "Milliliter", "Sugar"),
                (534, "Cup", "Oil"),
                (978, "Milliliter", "Pork"),
                (819, "Gram", "Tahini"),
            ],
            [
                (213, "Tea Spoon", "Lettuce"),
                (72, "Milliliter", "Parsley"),
                (173, "Whole", "Olive"),
            ],
            [
                (614, "Gram", "Lettuce"),
                (44, "Tea Spoon", "Italian dressing"),
                (894, "Milliliter", "Snake"),
            ],
            [
                (517, "Whole", "Flour"),
                (31, "Tea Spoon", "Yeast"),
                (699, "Tea Spoon", "Water"),
                (83, "Fluid Ounce", "Salt"),
                (119, "Whole", "Sugar"),
                (831, "Fluid Ounce", "Oil"),
                (967, "Fluid Ounce", "Onion"),
                (426, "Ounce", "Tahini"),
            ],
            [
                (848, "Tea Spoon", "Tomato"),
                (457, "Cup", "Passata"),
                (265, "Ounce", "Onion"),
                (635, "Gram", "Garlic"),
                (803, "Milliliter", "Spagetti"),
                (539, "Ounce", "Oregano"),
                (564, "Milliliter", "Black pepper"),
                (192, "Milliliter", "Sausage"),
                (625, "Ounce", "Tubetti"),
            ],
            [
                (607, "Whole", "Onion"),
                (264, "Gram", "Peppers"),
                (372, "Tea Spoon", "Garlic"),
                (891, "Whole", "Ginger"),
                (600, "Milliliter", "Tumeric"),
                (290, "Cup", "Cumin"),
                (101, "Ounce", "Coriander"),
                (440, "Milliliter", "Red chilli"),
                (247, "Fluid Ounce", "Tomato"),
                (541, "Gram", "Cauliflower"),
                (335, "Cup", "Monkfish"),
            ],
            [
                (108, "Tea Spoon", "Onion"),
                (162, "Cup", "Peppers"),
                (663, "Ounce", "Garlic"),
                (392, "Gram", "Ginger"),
                (817, "Cup", "Tumeric"),
                (16, "Cup", "Cumin"),
                (887, "Milliliter", "Coriander"),
                (552, "Ounce", "Curry leaf"),
                (585, "Fluid Ounce", "Green chilli"),
                (825, "Fluid Ounce", "Cod"),
                (728, "Milliliter", "Mango"),
            ],
            [
                (292, "Ounce", "Flour"),
                (391, "Whole", "Butter"),
                (321, "Ounce", "Egg"),
                (650, "Cup", "Milk"),
                (583, "Cup", "Hazelnut"),
                (245, "Tea Spoon", "Cheese"),
            ],
            [
                (933, "Ounce", "Garlic"),
                (609, "Fluid Ounce", "Yoghurt"),
                (484, "Ounce", "Basil"),
            ],
            [
                (808, "Ounce", "Lettuce"),
                (484, "Gram", "Angelica"),
                (338, "Milliliter", "Hake"),
            ],
            [
                (804, "Tea Spoon", "Flour"),
                (97, "Milliliter", "Butter"),
                (847, "Whole", "Egg"),
                (363, "Whole", "Sugar"),
                (933, "Milliliter", "Polenta"),
                (966, "Gram", "Popcorn"),
            ],
        ]

        pictures = [
            "013.jpg",
            "004.jpg",
            "001.jpg",
            "010.jpg",
            "012.jpg",
            "001.jpg",
            "001.jpg",
            "012.jpg",
            "010.jpg",
            "001.jpg",
            "006.jpg",
            "012.jpg",
            "001.jpg",
            "010.jpg",
            "004.jpg",
            "011.jpg",
            "002.jpg",
            "012.jpg",
            "007.jpg",
            "005.jpg",
            "007.jpg",
            "013.jpg",
            "014.jpg",
            "002.jpg",
            "006.jpg",
            "001.jpg",
            "009.jpg",
            "002.jpg",
            "005.jpg",
            "006.jpg",
            "009.jpg",
            "010.jpg",
            "012.jpg",
            "006.jpg",
            "001.jpg",
            "007.jpg",
            "002.jpg",
            "006.jpg",
            "001.jpg",
            "013.jpg",
            "013.jpg",
            "013.jpg",
            "001.jpg",
            "009.jpg",
            "013.jpg",
            "009.jpg",
            "002.jpg",
            "009.jpg",
            "011.jpg",
            "014.jpg",
        ]

        cat_name_lists = [
            [
                "Sushi",
                "Middle Eastern",
                "Beverage",
                "Burrito",
                "Pho",
                "Sauce",
                "Gluten-Free",
            ],
            ["Vietnamese", "Appetizer", "Ramen", "Seafood", "Central American", "Lamb"],
            ["Bakery", "Cocktail"],
            ["South American", "Seafood", "Salad"],
            ["Dinner", "Sauce", "Pho", "Seafood"],
            ["Vegetarian", "Beef", "African", "Gluten-Free", "Vietnamese"],
            ["Taco", "Dinner", "Enchilada", "Thai", "Pho", "Pork", "Korean"],
            ["Korean", "Bakery"],
            ["Sushi", "Thai", "Mediterranean", "Breakfast"],
            ["Vegetarian", "Korean", "Mexican"],
            ["Chinese", "Taco", "Indian", "Bakery", "African"],
            ["Snack", "Mediterranean", "Taco", "Italian", "Soup", "Enchilada"],
            ["South American", "Quesadilla", "Italian", "Vegan", "Vegetarian"],
            ["Lamb", "Italian", "Burrito", "Dessert"],
            ["Burrito", "Vegan", "Bakery"],
            ["Enchilada", "Smoothie", "Breakfast", "Sushi", "Indian", "Middle Eastern"],
            ["Mediterranean", "Pork", "Dairy-Free", "Lunch", "Pho", "Middle Eastern"],
            ["Burrito", "Bakery", "Dairy-Free", "Korean"],
            [
                "Dessert",
                "Vegan",
                "Bakery",
                "Burrito",
                "Dairy-Free",
                "South American",
                "Smoothie",
            ],
            ["Taco", "Poultry", "Chinese", "Pork", "Tamale"],
            ["Japanese", "Pho", "Pork", "Cocktail"],
            ["Italian", "Enchilada", "Chinese", "Quesadilla", "Poultry", "Soup"],
            ["Caribbean", "Sauce", "Burrito"],
            ["Soup", "Thai"],
            ["Indian", "Pork", "Poultry", "Vegan", "Quesadilla", "Seafood"],
            ["Dinner", "Indian", "Mexican", "Paleo"],
            ["Enchilada", "Mexican"],
            ["Poultry", "Chinese"],
            ["Vietnamese", "Mexican"],
            ["Lunch", "Paleo", "Beverage", "African", "Caribbean", "Appetizer"],
            ["Cocktail", "Tamale", "African", "Burrito"],
            [
                "Burrito",
                "Meat",
                "Appetizer",
                "Dinner",
                "Vegetarian",
                "Beverage",
                "Central American",
            ],
            ["Salad", "Tamale", "Gluten-Free", "Bakery", "Ramen", "Snack"],
            ["Enchilada", "Sushi", "Vietnamese", "Mediterranean", "Gluten-Free"],
            ["Middle Eastern", "Quesadilla", "Cocktail", "Bakery", "Gluten-Free"],
            ["Korean", "Japanese", "Indian", "African"],
            ["Dessert", "Snack", "Low-Carb"],
            ["Middle Eastern", "Chinese", "Meat", "Central American"],
            ["Mexican", "Lunch", "Seafood", "Mediterranean", "Japanese"],
            ["Soup", "Mediterranean", "Poultry", "Dessert"],
            ["Thai", "Korean", "Cocktail", "Vegan", "Lunch"],
            ["Beverage", "Gluten-Free"],
            ["Seafood", "Vietnamese", "Korean", "Vegan", "Taco", "Poultry"],
            ["South American", "Pork", "Burrito", "Low-Carb", "Dairy-Free", "Smoothie"],
            ["Middle Eastern", "Enchilada"],
            [
                "Italian",
                "Middle Eastern",
                "Snack",
                "Sushi",
                "African",
                "Salad",
                "Vegetarian",
            ],
            [
                "Ramen",
                "Lunch",
                "Seafood",
                "Tamale",
                "Italian",
                "Mediterranean",
                "Middle Eastern",
            ],
            ["Central American", "Sauce", "Meat", "Snack"],
            ["Salad", "Vietnamese", "Taco", "Lunch", "Chinese", "Soup"],
            ["Paleo", "Salad"],
        ]

        recipe_ratings = [
            (3, 2, 4),
            (3, 1, 5),
            (1, 4),
            (5, 1, 4),
            (2, 3),
            (2, 3, 5),
            (4, 4, 4, 3),
            (4, 3, 5),
            (4, 4, 2, 4, 2, 2),
            (5, 4, 2),
            (3, 4, 4, 3, 2, 4),
            (3, 1, 4),
            (4, 4, 2, 4, 2, 2),
            (4, 3, 5),
            (4, 4, 4, 3),
            (5, 1, 4),
            (4, 3, 5),
            (4, 4, 2, 4, 2, 2),
            (3, 4, 4, 3, 2, 4),
            (4, 3, 5),
            (4, 4, 4, 3),
            (5, 1, 4),
            (4, 3, 5),
            (4, 4, 2, 4, 2, 2),
            (3, 4, 4, 3, 2, 4),
            (4, 3, 5),
            (4, 4, 4, 3),
            (5, 1, 4),
            (4, 3, 5),
            (4, 4, 2, 4, 2, 2),
            (3, 4, 4, 3, 2, 4),
            (4, 3, 5),
            (4, 4, 4, 3),
            (5, 1, 4),
            (4, 3, 5),
            (4, 4, 2, 4, 2, 2),
            (3, 4, 4, 3, 2, 4),
            (4, 3, 5),
            (4, 4, 4, 3),
            (5, 1, 4),
            (4, 3, 5),
            (4, 4, 2, 4, 2, 2),
            (3, 4, 4, 3, 2, 4),
            (4, 3, 5),
            (4, 3, 5),
            (4, 4, 4, 3),
            (5, 1, 4),
            (5, 4, 2),
            (3, 4, 4, 3, 2, 4),
            (3, 1, 4),
        ]

        categories_list = []

        for cat_name_sublist in cat_name_lists:
            cat_object_sublist = []
            for category_name in cat_name_sublist:
                try:
                    category_object = Category.objects.get(category_name=category_name)
                    cat_object_sublist.append(category_object)
                except Exception:
                    continue
            categories_list.append(cat_object_sublist)

        authors = [author_pool[i % len(author_pool)] for i in range(0, len(titles))]

        for (
            author,
            title,
            description,
            direction,
            minute,
            picture,
            ing_sublist,
            cat_sublist,
            rating_sublist,
        ) in zip(
            authors,
            titles,
            descriptions,
            directions,
            minutes,
            pictures,
            ingredient_list,
            categories_list,
            recipe_ratings,
        ):
            if len(authors) == 0:
                author = default_author
            if Recipe.objects.filter(title=title):
                title = title + "(1)"
            if len(rating_sublist) > len(author_pool):
                rating_sublist = ()
            with transaction.atomic():
                recipe = Recipe(
                    author_id=author,
                    title=title,
                    description=description,
                    directions=direction,
                    minutes_to_make=minute,
                    recipe_picture="/images/" + picture,
                )
                try:
                    recipe.clean_fields()
                except Exception:
                    continue
                recipe.save()

                for amount, unit, description in ing_sublist:
                    ingredient = Ingredient(
                        recipe_id=recipe,
                        amount=amount,
                        measurement_unit=unit,
                        description=description,
                    )
                    try:
                        ingredient.clean_fields()
                    except Exception:
                        continue
                    ingredient.save()

                for category_object in cat_sublist:
                    recipe.categories.add(category_object)

                for i in range(0, len(rating_sublist)):
                    rating = Rating(
                        author_id=author_pool[i],
                        recipe_id=recipe,
                        rating=rating_sublist[i],
                    )
                    try:
                        rating.clean_fields()
                    except Exception:
                        continue
                    rating.save()

    operations = [
        migrations.RunPython(generate_data),
    ]
